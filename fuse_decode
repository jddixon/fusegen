#!/usr/bin/python3

import os
import struct
import sys
from argparse import ArgumentParser
# XXX we want to drop OP_NAMES
from fusegen import __version__, __version_date__, OP_NAMES, FuseFunc
from optionz import dump_options


def decode(chunk):
    sec, ns, lateNsec, b0, b1, b2, op_code = struct.unpack('IIIBBBB', chunk)
    # DEBUG
    #print("%3d %3d %3d %3d" % (b0, b1, b2, opCode))
    # END
    lateSec = 0x3f & b0             # low-order 7 bits
    lowBit = (b0 >> 7) & 1         # high-order bit from that byte
    higherBits = (b1 + (b2 << 8)) << 1
    byteCount = higherBits | lowBit

    return sec, ns, lateSec, lateNsec, byteCount, op_code


def doCounts(args):
    """ generate a table showing how often each opcode ws invoked """
    howMany = args.howMany
    path = args.pathToData
    verbose = args.verbose
    zeroes = args.zeroes

    with open(path, 'rb') as file:
        data = file.read()
    byteCount = len(data)
    opCount = byteCount / 16
    if verbose:
        print("%d bytes, %d ops" % (byteCount, opCount))

    junk, op_code_map = FuseFunc.get_func_map()

    # XXX WORKING HERE XXX

    table = [0] * len(OP_NAMES)
    for n in range(howMany):
        begin = n * 16
        end = begin + 16
        chunk = data[begin:end]
        sec, ns, lateSec, lateNsec, byteCount, op_code = decode(chunk)
        table[op_code] += 1

    myMap = {}
    for n, name in enumerate(OP_NAMES):
        myMap[name] = (n, table[n])

    # header line
    nonZ = 0    # index of opcodes with non-zero count
    print("ndx opCode name                count")
    for name in sorted(OP_NAMES):
        n, count = myMap[name]
        if (zeroes and count == 0) or ((not zeroes) and count > 0):
            print("%3d  %4d  %-16s   %6d" % (nonZ, n, name, count))
            nonZ += 1


def simpleDump(args):
    # column headers
    print("==== op time === == latency == = byte = == opcode ==     = flags =")
    print("  sec   nanosec  sec  nanosec   count   op   name")

    howMany = args.howMany
    path = args.pathToData
    verbose = args.verbose

    with open(path, 'rb') as file:
        data = file.read()
    byteCount = len(data)
    opCount = byteCount / 16
    if verbose:
        print("%d bytes, %d ops" % (byteCount, opCount))
    lastSec = 0
    lastNsec = 0
    lastLateSec = 0
    lastLateNsec = 0
    for n in range(howMany):
        flag = ''                          # 'P' if concurrency detected
        begin = n * 16
        end = begin + 16
        chunk = data[begin:end]
        sec, ns, lateSec, lateNsec, byteCount, op_code = decode(chunk)
        if sec == lastSec and ns < lastNsec + lastLateNsec:
            flag = 'P'
        print("%6d %9d %2d %9d %7d   %2d %-16s %s" % (
            sec, ns, lateSec, lateNsec,
            byteCount, op_code, OP_NAMES[op_code], flag))
        lastSec = sec
        lastNsec = ns
        lastLateSec = lateSec
        lastLateNsec = lateNsec


def doRun(args):
    counting = args.stats
    if counting:
        doCounts(args)
    else:
        simpleDump(args)


def main():
    desc = 'parse a fuseGenned data file'
    parser = ArgumentParser(description=desc)

    parser.add_argument('-D', '--pathToData',
                        help='path to data file')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    parser.add_argument('-n', '--howMany', type=int, default=0,
                        help='how many data points to decode')

    parser.add_argument('-S', '--stats', action='store_true',
                        help='be chatty')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')

    parser.add_argument('-z', '--zeroes', action='store_true',
                        help='list only zero-count opcodes')

    args = parser.parse_args()

    # sanity checks -------------------------------------------------
    if not os.path.exists(args.pathToData):
        print("%s does not exist; aborting" % args.pathToData)
        sys.exit(1)

    # fixups --------------------------------------------------------
    fileSize = os.path.getsize(args.pathToData)
    itemCount = int(fileSize / 16)
    if itemCount * 16 != fileSize:
        print("warning: file size is not a multiple of 16")
    if args.howMany > itemCount or args.howMany == 0:
        args.howMany = itemCount

    # sanity checks -------------------------------------------------
    if args.howMany <= 0:
        print("%d is not a positive integer" % args.howMany)
        sys.exit(1)

    # complete setup ------------------------------------------------
    app_name = 'fuse_decode %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (app_name, __version_date__))

    if args.verbose or args.justShow:
        print(dump_options(args))

    if not args.justShow:
        doRun(args)

if __name__ == '__main__':
    main()
