#!/usr/bin/python3
#
# ~/dev/py/fusegen/fuseGen

import errno, os, sys, shutil, time
from argparse  import ArgumentParser
from fusegen   import *

# attributes of fuse operations

RETURNS_NETSTAT = 0x001     # check
DEPRECATED      = 0x002     # 'D'
SIMPLE_ERROR    = 0x004     # 'e'
COMPLEX_ERROR   = 0x008     # 'ee'
FULL_PATH       = 0x010     # 'f'
DOUBLE_FULL_PATH= 0x020     # 'ff'
SIMPLE_LOGGING  = 0x040     # 'L'
COMPLEX_LOGGING = 0x080     # 'LL'
IFDEF_XATTR     = 0x100     # 'X'

def setOpAttrs():
    """
    Return a map from fuse op names to attributes
    """
    opAttrs = {}
    for name in OP_NAMES:
        attrs = 0
        if name == 'getdir':
            attrs |= DEPRECATED

        if name != 'init' and name != 'destroy':
            attrs |= RETURNS_NETSTAT

        if name == 'link':
            attrs |= DOUBLE_FULL_PATH
        elif name not in ['read', 'write', 'flush', 'release', 'fsync',
                      'readdir', 'releasedir','fsyncdir', 'init',
                      'destroy', 'ftruncate', 'fgetattr']:
            attrs |= FULL_PATH

        if name in ['mknod', 'open', 'readdir', 'create',]:
            attrs |= COMPLEX_ERROR
        elif name in ['releasedir', 'fsyncdir', 'init', 'destroy',]:
            pass
        else:
            attrs |= SIMPLE_ERROR

        if name in ['setxattr', 'getxattr', 'listxattr', 'removexattr',]:
            attrs |= IFDEF_XATTR

        if name in ['readlink', 'mknod', 'read', 'write',
                    'getxattr', 'listxattr', 'readdir',]:
            attrs |= COMPLEX_LOGGING
        else:
            attrs |= SIMPLE_LOGGING

    return opAttrs

def makedir_p(path, mode):
    # XXX SLOPPY: doesn't handle case where mode is wrong
    # XXX MISLEADING: the name suggests it creates missing subdirs
    try:
        os.mkdir(path, mode)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise e
        pass

def makeFusePkg(args):
    force           = args.force
    lcName          = args.lcName
    myDate          = args.myDate
    myVersion       = args.myVersion
    pathToPkg       = args.pathToPkg    # target package directory
    pkgName         = args.pkgName
    testing         = args.testing
    ucName          = args.ucName
    verbose         = args.verbose
  
    # if -force and pathToPkg exists, delete it ---------------------
    if force and os.path.exists(pathToPkg):
        shutil.rmtree(pathToPkg)

    # create directories --------------------------------------------
    os.mkdir(pathToPkg, 0o755)

    makeFileSubDirs = ['doc', 'examples', 'man', 'scripts', 'src', 'tests',]
    otherSubDirs    = ['automAte.cache', 'ghpDoc', 'm4', ]
    subDirs         = makeFileSubDirs + otherSubDirs
    for dir in subDirs:
        pathToSubDir = os.path.join(pathToPkg, dir)
        makedir_p(pathToSubDir, 0o755)

    # write CHANGES -------------------------------------------------
    chgFile = os.path.join(pathToPkg, 'CHANGES')
    with open(chgFile, 'w', 0o644) as f:
        f.write("~/dev/c/%s/CHANGES\n\n" % pkgName)
        f.write("v%s\n" % myVersion)
        f.write("    %s\n" % myDate)
        f.write("        *\n")

    # write configure.ac --------------------------------------------
    todoFile = os.path.join(pathToPkg, 'configure.ac')
    with open(todoFile, 'w', 0o644) as f:
        f.write("~/dev/c/%s/TODO\n\n" % pkgName)
        f.write("%s\n" % myDate)
        f.write("    *\n")

    # write TODO ----------------------------------------------------
    todoFile = os.path.join(pathToPkg, 'TODO')
    with open(todoFile, 'w', 0o644) as f:
        f.write("~/dev/c/%s/TODO\n\n" % pkgName)
        f.write("%s\n" % myDate)
        f.write("    *\n")

    # XXX MUCH STUFF MISSING #
    
    opAttrs = setOpAttrs()
    # mkSrcDir(args, opAttrs)


def main():
    """
    Expect a command like
        fuseGen [options] 

    """

    # program defaults ----------------------------------------------
    myDate   = "%04d-%02d-%02d" % time.gmtime()[:3]

    # parse the command line ----------------------------------------
    
    DESC = 'generate directory and skeletal files for an Autotools-based C library'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-D', '--myDate', default=myDate,
        help='date in YYYY-MM-DD format')

    parser.add_argument('-f', '--force', action='store_true',
        help='if utility already exists, overwrite it')

    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')

    parser.add_argument('-P', '--pkgName', 
        help='utility package name')
    
    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')

    parser.add_argument('-v', '--verbose', action='store_true',
        help='be chatty')

    parser.add_argument('-V', '--myVersion', default = '0.0.0',
        help="version in X.Y.Z format")

    args = parser.parse_args()

    # sanity checks -------------------------------------------------
    checkDate(args.myDate)
    checkPkgName(args.pkgName)
    checkVersion(args.myVersion)
    
    # fixups --------------------------------------------------------
    args.lcName = args.pkgName.lower()
    args.ucName = args.pkgName.upper()

    if args.testing:
        args.pathToPkg = os.path.join('tmp', args.pkgName)
    else:
        args.pathToPkg = os.path.join('/home/jdd/dev/c', args.pkgName)

    # complete setup ------------------------------------------------
    appName = 'fuseGen %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print ("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('force                = ' + str(args.force))
        print('myDate               = ' + str(args.myDate))
        print('myVersion            = ' + str(args.myVersion))
        print('pathToPkg            = ' + str(args.pathToPkg))
        print('pkgName              = ' + str(args.pkgName))
        print('  lcName             = ' + str(args.lcName))
        print('  ucName             = ' + str(args.ucName))
        print('testing              = ' + str(args.testing))
        print('verbose              = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    makeFusePkg(args)

        
if __name__ == '__main__':
    main()

